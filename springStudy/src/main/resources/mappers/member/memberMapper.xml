<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<sql id="search">
		<choose>
			<when test="search_option == 'id_name_gender' ">
				and (id like '%' || #{search_data} || '%' or 
					name like '%' || #{search_data} || '%' or 
					gender like '%' || #{search_data} || '%') 
			</when>
			<when test="search_option != null and search_option != '' and search_data != null and search_data != '' ">
				and (${search_option} like '%' || #{search_data} || '%') 
			</when>
			<otherwise>
				and no > '0' 
			</otherwise>
		</choose>
	</sql>
	
	<select id="pwdCheck" resultType="String">
		select passwd from member where no = #{no}
	</select>
	<select id="getTotalRecord" resultType="int">
		select count(*) from member where 1=1
		<include refid="search"></include>
	</select>
	
	<select id="getList" resultType="com.test.springStudy.member.model.dto.MemberDTO">
			select * from (select A.*, Rownum Rnum from (
				select * from member where 1=1 
				<include refid="search"></include>
		<![CDATA[
				order by no desc
			) A) where Rnum >= #{startRecord} and Rnum <= #{lastRecord}
		]]>
	</select>
	
	<select id="getView" resultType="com.test.springStudy.member.model.dto.MemberDTO">
		select * from 
		(
			select t1.*, 
			LAG(no) OVER (ORDER BY no desc) preNo, 
			LAG(id) OVER (ORDER BY no desc) preId, 
			LEAD(no) OVER (ORDER BY no desc) nxtNo, 
			LEAD(id) OVER (ORDER BY no desc) nxtId 
			from member t1 
			where 1=1 
			<include refid="search"></include>
			order by no desc
		) where no = #{no} 	
	</select>
	
	<select id="getIdCheck" resultType="int">
		select count(*) from member where id = #{id}
	</select>
	
	<select id="getIdCheckWin" resultType="String">
		select id from member where id = #{id}
	</select>
	
	<select id="getLogin" resultType="com.test.springStudy.member.model.dto.MemberDTO">
		select no, id, name from  member where id = #{dto.id} and passwd = #{dto.passwd}
	</select>
	
	<insert id="setInsert">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select seq_member.nextval from dual
		</selectKey>
			insert into member (no, id, passwd, name, gender, bornYear, postCode, address, detailAddress, extraAddress, regiDate) 
			values(#{no}, #{id}, #{passwd}, #{name}, #{gender}, #{bornYear}, #{postCode}, #{address}, #{detailAddress},
			#{extraAddress}, current_timeStamp)
	</insert>

	<update id="setUpdate">
		update member set gender = #{gender}, bornYear = #{bornYear},  postCode = #{postCode} , address = #{address},
		detailAddress = #{detailAddress}, extraAddress = #{extraAddress}
		 where no = #{no} 
	</update>
	
	<select id="setUpdate___" resultType="Integer">
		update member set gender = #{dto.gender}, bornYear = #{dto.bornYear} where no = #{dto.no} and passwd = #{dto.passwd} 
		RETURNING no;
	</select>
	
	<delete id="deleteMember">
		delete from member where no = #{no} and passwd = #{passwd}
	</delete>
</mapper>